<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:20 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c6_t1_hit_detector_alt.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 18:41:40 30&#47;11&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c6_t1_hit_detector_alt <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      btn     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_x   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit     : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c6_t1_hit_detector_alt ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c6_t1_hit_detector_alt.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 18:41:40 30&#47;11&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;


<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c6_t1_hit_detector_alt <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout10 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout3  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout6  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout7  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout8  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout9  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> q      : <span class=T>std_logic</span>;


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_11' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_11reg_cval : <span class=T>std_logic</span>;


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'adff'</span>
   q <= mw_U_11reg_cval;
   u_11seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_11reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_11reg_cval <= dout9;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_11seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'and'</span>
   dout <= gun_x(7) <span class=K>AND</span> alien_x(7);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'and'</span>
   dout1 <= gun_x(6) <span class=K>AND</span> alien_x(6);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'and'</span>
   dout2 <= gun_x(5) <span class=K>AND</span> alien_x(5);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'and'</span>
   dout3 <= gun_x(4) <span class=K>AND</span> alien_x(4);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'and'</span>
   dout4 <= gun_x(3) <span class=K>AND</span> alien_x(3);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'and'</span>
   dout5 <= gun_x(2) <span class=K>AND</span> alien_x(2);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'and'</span>
   dout6 <= gun_x(1) <span class=K>AND</span> alien_x(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'and'</span>
   dout7 <= gun_x(0) <span class=K>AND</span> alien_x(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'and'</span>
   dout9 <= btn <span class=K>AND</span> dout8;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'constval'</span>
   dout10 <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'mux'</span>
   u_10combo_proc: <span class=K>PROCESS</span>(q, dout10, btn)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> btn <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => hit <= q;
      <span class=K>WHEN</span> '1' => hit <= dout10;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => hit <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'or'</span>
   dout8 <= dout <span class=K>OR</span> dout1 <span class=K>OR</span> dout2 <span class=K>OR</span> dout3 <span class=K>OR</span> dout4 <span class=K>OR</span> dout5 <span class=K>OR</span> dout6
            <span class=K>OR</span> dout7;

   <span class=C>-- Instance port mappings.</span>

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
