<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:23 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t1_gunmodule.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-310-SPC)</span>
<span class=C>--          at - 11:52:07 25.10.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t1_gunmodule <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_px_id : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_color : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t1_gunmodule ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t1_gunmodule.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-320-SPC)</span>
<span class=C>--          at - 13:55:06  3.11.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c4_t1_gunmodule <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> binary_in   : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1        : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1       : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> one_hot_out : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result      : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result1     : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_in        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_5' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_5reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_b1_incrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c1_b2_decrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_b1_binary_to_onehot
   <span class=K>PORT</span> (
      binary_in   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      one_hot_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_pixel_indexer
   <span class=K>PORT</span> (
      gun_pix_id : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      x_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_out      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_out      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_b1_incrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_b1_incrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_b2_decrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_b2_decrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_b1_binary_to_onehot <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_b1_binary_to_onehot;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_pixel_indexer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_pixel_indexer;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'adff'</span>
   binary_in <= mw_U_5reg_cval;
   u_5seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_5reg_cval <= <span class=S>"001"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_5reg_cval <= dout1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'and'</span>
   dout2 <= enable <span class=K>AND</span> dout;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'constval'</span>
   gun_color <= x<span class=S>"00FF00"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'constval'</span>
   y_in <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(binary_in, din1, dout2)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout2 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout1 <= binary_in;
      <span class=K>WHEN</span> '1' => dout1 <= din1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(result, result1, btn)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> btn(3) <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => din1 <= result;
      <span class=K>WHEN</span> '1' => din1 <= result1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => din1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'or'</span>
   dout <= btn(1) <span class=K>OR</span> btn(3);

   <span class=C>-- Instance port mappings.</span>
   U_2 : c1_b1_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => binary_in,
         result => result
      );
   U_3 : c1_b2_decrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => binary_in,
         result => result1
      );
   U_4 : c2_b1_binary_to_onehot
      <span class=K>PORT</span> <span class=K>MAP</span> (
         binary_in   => binary_in,
         one_hot_out => one_hot_out
      );
   U_10 : c4_t1_pixel_indexer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         gun_pix_id => gun_px_id,
         x_in       => one_hot_out,
         y_in       => y_in,
         x_out      => x_coord,
         y_out      => y_coord
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
