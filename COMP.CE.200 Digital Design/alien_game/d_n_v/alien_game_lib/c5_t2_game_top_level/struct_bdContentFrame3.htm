<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:21 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_game_top_level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 11:13:15 01&#47;12&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_game_top_level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color_BGR   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      write       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_game_top_level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_game_top_level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 11:13:15 01&#47;12&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c5_t2_game_top_level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> alien_color   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> alien_defeted : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din1          : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_px_idx    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c3_t1_basic_alien
   <span class=K>PORT</span> (
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      alien_defeted : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_gunmodule
   <span class=K>PORT</span> (
      btn       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_id : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_color : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t1_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c6_t1_hit_detector_alt
   <span class=K>PORT</span> (
      alien_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      btn     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit     : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_basic_alien <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_basic_alien;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_gunmodule <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_gunmodule;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t1_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t1_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c6_t1_hit_detector_alt <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c6_t1_hit_detector_alt;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(alien_color, din1, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select(0) <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => color_BGR <= alien_color;
      <span class=K>WHEN</span> '1' => color_BGR <= din1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color_BGR <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(x_coord1, x_coord2, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select(0) <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => x_coord <= x_coord1;
      <span class=K>WHEN</span> '1' => x_coord <= x_coord2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(y_coord2, y_coord1, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select(0) <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => y_coord <= y_coord2;
      <span class=K>WHEN</span> '1' => y_coord <= y_coord1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_1 : c3_t1_basic_alien
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk           => clk,
         enable        => enable,
         hit           => hit,
         rst_n         => rst_n,
         alien_color   => alien_color,
         alien_defeted => alien_defeted,
         x_coord       => x_coord1,
         y_coord       => y_coord2
      );
   U_2 : c4_t1_gunmodule
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn       => btn,
         clk       => clk,
         enable    => enable,
         gun_px_id => gun_px_idx,
         rst_n     => rst_n,
         gun_color => din1,
         x_coord   => x_coord2,
         y_coord   => y_coord1
      );
   U_0 : c5_t1_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => alien_defeted,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         write          => write
      );
   U_7 : c6_t1_hit_detector_alt
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x => x_coord1,
         btn     => btn(0),
         clk     => clk,
         gun_x   => x_coord2,
         rst_n   => rst_n,
         hit     => hit
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
