-- VHDL Entity alien_game_lib.c5_t1_write_sequencer.symbol
--
-- Created:
--          by - koistin3.UNKNOWN (HTC219-310-SPC)
--          at - 13:49:52 10.11.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t1_write_sequencer IS
   PORT( 
      alien_defeated : IN     std_logic;
      clk            : IN     std_logic;
      rst_n          : IN     std_logic;
      write_ready    : IN     std_logic;
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic
   );

-- Declarations

END c5_t1_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c5_t1_write_sequencer.fsm
--
-- Created:
--          by - koistin3.UNKNOWN (HTC219-311-SPC)
--          at - 12:36:13 17.11.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t1_write_sequencer IS

   TYPE STATE_TYPE IS (
      alien,
      gun_00,
      gun_01,
      gun_10,
      gun_11,
      draw_frame_done,
      enable_up,
      wait_state
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;
   -- pragma synthesis_off
   SIGNAL hds_next,hds_current,hds_clock: INTEGER;
   -- pragma synthesis_on

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_wait_state : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= alien;
         csm_timer <= (OTHERS => '0');
         -- pragma synthesis_off
         hds_current <= 0;
         -- pragma synthesis_on
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- pragma synthesis_off
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         -- pragma synthesis_on
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_wait_state <= '0';
      CASE current_state IS
         WHEN alien => 
            IF (write_ready = '1') THEN 
               next_state <= gun_00;
               -- pragma synthesis_off
               hds_next <= 1;
               -- pragma synthesis_on
            ELSE
               next_state <= alien;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_00 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_01;
               -- pragma synthesis_off
               hds_next <= 2;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_00;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_01 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_10;
               -- pragma synthesis_off
               hds_next <= 3;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_01;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_10 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_11;
               -- pragma synthesis_off
               hds_next <= 4;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_10;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_11 => 
            IF (write_ready = '1') THEN 
               next_state <= draw_frame_done;
               -- pragma synthesis_off
               hds_next <= 5;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_11;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN draw_frame_done => 
            next_state <= enable_up;
            -- pragma synthesis_off
            hds_next <= 6;
            -- pragma synthesis_on
         WHEN enable_up => 
            next_state <= wait_state;
            csm_to_wait_state <= '1';
            -- pragma synthesis_off
            hds_next <= 7;
            -- pragma synthesis_on
         WHEN wait_state => 
            IF (csm_timeout = '1') THEN 
               next_state <= alien;
               -- pragma synthesis_off
               hds_next <= 8;
               -- pragma synthesis_on
            ELSE
               next_state <= wait_state;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN OTHERS =>
            next_state <= alien;
            -- pragma synthesis_off
            hds_next <= 0;
            -- pragma synthesis_on
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= "00";
      module_select <= "00";
      write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN alien => 
            write <= '1';
         WHEN gun_00 => 
            module_select <= "01"; 
            gun_px_idx <= "00";
            write <= '1';
         WHEN gun_01 => 
            module_select <= "01";
            gun_px_idx <= "01";
            write <= '1';
         WHEN gun_10 => 
            module_select <= "01";
            gun_px_idx <= "10";
            write <= '1';
         WHEN gun_11 => 
            module_select <= "01";
            gun_px_idx <= "11";
            write <= '1';
         WHEN draw_frame_done => 
            frame_done <= '1';
         WHEN enable_up => 
            enable <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_wait_state
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_wait_state = '1') THEN
         csm_next_timer <= "101111101011110000011111"; -- no cycles(12500000)-1=12499999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
