-- VHDL Entity alien_game_lib.c4_b2_shiel_reset.symbol
--
-- Created:
--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)
--          at - 16:04:15 17/11/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_b2_shiel_reset IS
   PORT( 
      clk   : IN     std_logic;
      rst_n : IN     std_logic;
      done  : OUT    std_logic;
      s_rst : OUT    std_logic
   );

-- Declarations

END c4_b2_shiel_reset ;

--
-- VHDL Architecture alien_game_lib.c4_b2_shiel_reset.fsm
--
-- Created:
--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)
--          at - 16:04:15 17/11/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c4_b2_shiel_reset IS

   TYPE STATE_TYPE IS (
      init,
      shield_reset,
      s_reset_down,
      done_up
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;
   -- pragma synthesis_off
   SIGNAL hds_next,hds_current,hds_clock: INTEGER;
   -- pragma synthesis_on

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_shield_reset : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
         csm_timer <= (OTHERS => '0');
         -- pragma synthesis_off
         hds_current <= 0;
         -- pragma synthesis_on
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- pragma synthesis_off
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         -- pragma synthesis_on
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_shield_reset <= '0';
      CASE current_state IS
         WHEN init => 
            IF (rst_n = '1') THEN 
               next_state <= shield_reset;
               csm_to_shield_reset <= '1';
               -- pragma synthesis_off
               hds_next <= 1;
               -- pragma synthesis_on
            ELSE
               next_state <= init;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN shield_reset => 
            IF (csm_timeout = '1') THEN 
               next_state <= s_reset_down;
               -- pragma synthesis_off
               hds_next <= 2;
               -- pragma synthesis_on
            ELSE
               next_state <= shield_reset;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s_reset_down => 
            next_state <= done_up;
            -- pragma synthesis_off
            hds_next <= 3;
            -- pragma synthesis_on
         WHEN done_up => 
            IF (rst_n = '0') THEN 
               next_state <= init;
               -- pragma synthesis_off
               hds_next <= 4;
               -- pragma synthesis_on
            ELSE
               next_state <= done_up;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN OTHERS =>
            next_state <= init;
            -- pragma synthesis_off
            hds_next <= 0;
            -- pragma synthesis_on
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      done <= '0';
      s_rst <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN shield_reset => 
            s_rst <= '0';
         WHEN s_reset_down => 
            done <= '0';
         WHEN done_up => 
            done <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_shield_reset
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_shield_reset = '1') THEN
         csm_next_timer <= "1001"; -- no cycles(10)-1=9
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
