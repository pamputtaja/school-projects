-- VHDL Entity alien_game_lib.c4_t1_gunmodule.symbol
--
-- Created:
--          by - koistin3.UNKNOWN (HTC219-310-SPC)
--          at - 11:52:07 25.10.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t1_gunmodule IS
   PORT( 
      btn       : IN     std_logic_vector (3 DOWNTO 0);
      clk       : IN     std_logic;
      enable    : IN     std_logic;
      gun_px_id : IN     std_logic_vector (1 DOWNTO 0);
      rst_n     : IN     std_logic;
      gun_color : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord   : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord   : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c4_t1_gunmodule ;

--
-- VHDL Architecture alien_game_lib.c4_t1_gunmodule.struct
--
-- Created:
--          by - koistin3.UNKNOWN (HTC219-320-SPC)
--          at - 13:55:06  3.11.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c4_t1_gunmodule IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL binary_in   : std_logic_vector(2 DOWNTO 0);
   SIGNAL din1        : std_logic_vector(2 DOWNTO 0);
   SIGNAL dout        : std_logic;
   SIGNAL dout1       : std_logic_vector(2 DOWNTO 0);
   SIGNAL dout2       : std_logic;
   SIGNAL one_hot_out : std_logic_vector(7 DOWNTO 0);
   SIGNAL result      : std_logic_vector(2 DOWNTO 0);
   SIGNAL result1     : std_logic_vector(2 DOWNTO 0);
   SIGNAL y_in        : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_5' of 'adff'
   SIGNAL mw_U_5reg_cval : std_logic_vector(2 DOWNTO 0);

   -- Component Declarations
   COMPONENT c1_b1_incrementer
   PORT (
      value  : IN     std_logic_vector (2 DOWNTO 0);
      result : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c1_b2_decrementer
   PORT (
      value  : IN     std_logic_vector (2 DOWNTO 0);
      result : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_b1_binary_to_onehot
   PORT (
      binary_in   : IN     std_logic_vector (2 DOWNTO 0);
      one_hot_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c4_t1_pixel_indexer
   PORT (
      gun_pix_id : IN     std_logic_vector (1 DOWNTO 0);
      x_in       : IN     std_logic_vector (7 DOWNTO 0);
      y_in       : IN     std_logic_vector (7 DOWNTO 0);
      x_out      : OUT    std_logic_vector (7 DOWNTO 0);
      y_out      : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c1_b1_incrementer USE ENTITY alien_game_lib.c1_b1_incrementer;
   FOR ALL : c1_b2_decrementer USE ENTITY alien_game_lib.c1_b2_decrementer;
   FOR ALL : c2_b1_binary_to_onehot USE ENTITY alien_game_lib.c2_b1_binary_to_onehot;
   FOR ALL : c4_t1_pixel_indexer USE ENTITY alien_game_lib.c4_t1_pixel_indexer;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_5' of 'adff'
   binary_in <= mw_U_5reg_cval;
   u_5seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_5reg_cval <= "001";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_5reg_cval <= dout1;
      END IF;
   END PROCESS u_5seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'and'
   dout2 <= enable AND dout;

   -- ModuleWare code(v1.12) for instance 'U_0' of 'constval'
   gun_color <= x"00FF00";

   -- ModuleWare code(v1.12) for instance 'U_1' of 'constval'
   y_in <= "10000000";

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(binary_in, din1, dout2)
   BEGIN
      CASE dout2 IS
      WHEN '0' => dout1 <= binary_in;
      WHEN '1' => dout1 <= din1;
      WHEN OTHERS => dout1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(result, result1, btn)
   BEGIN
      CASE btn(3) IS
      WHEN '0' => din1 <= result;
      WHEN '1' => din1 <= result1;
      WHEN OTHERS => din1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_8combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'or'
   dout <= btn(1) OR btn(3);

   -- Instance port mappings.
   U_2 : c1_b1_incrementer
      PORT MAP (
         value  => binary_in,
         result => result
      );
   U_3 : c1_b2_decrementer
      PORT MAP (
         value  => binary_in,
         result => result1
      );
   U_4 : c2_b1_binary_to_onehot
      PORT MAP (
         binary_in   => binary_in,
         one_hot_out => one_hot_out
      );
   U_10 : c4_t1_pixel_indexer
      PORT MAP (
         gun_pix_id => gun_px_id,
         x_in       => one_hot_out,
         y_in       => y_in,
         x_out      => x_coord,
         y_out      => y_coord
      );

END struct;
