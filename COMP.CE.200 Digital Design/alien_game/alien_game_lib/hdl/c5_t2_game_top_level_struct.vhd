-- VHDL Entity alien_game_lib.c5_t2_game_top_level.symbol
--
-- Created:
--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)
--          at - 11:13:15 01/12/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t2_game_top_level IS
   PORT( 
      btn         : IN     std_logic_vector (3 DOWNTO 0);
      clk         : IN     std_logic;
      rst_n       : IN     std_logic;
      write_ready : IN     std_logic;
      color_BGR   : OUT    std_logic_vector (23 DOWNTO 0);
      frame_done  : OUT    std_logic;
      write       : OUT    std_logic;
      x_coord     : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord     : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c5_t2_game_top_level ;

--
-- VHDL Architecture alien_game_lib.c5_t2_game_top_level.struct
--
-- Created:
--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)
--          at - 11:13:15 01/12/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c5_t2_game_top_level IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alien_color   : std_logic_vector(23 DOWNTO 0);
   SIGNAL alien_defeted : std_logic;
   SIGNAL din1          : std_logic_vector(23 DOWNTO 0);
   SIGNAL enable        : std_logic;
   SIGNAL gun_px_idx    : std_logic_vector(1 DOWNTO 0);
   SIGNAL hit           : std_logic;
   SIGNAL module_select : std_logic_vector(1 DOWNTO 0);
   SIGNAL x_coord1      : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord2      : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord1      : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord2      : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT c3_t1_basic_alien
   PORT (
      clk           : IN     std_logic ;
      enable        : IN     std_logic ;
      hit           : IN     std_logic ;
      rst_n         : IN     std_logic ;
      alien_color   : OUT    std_logic_vector (23 DOWNTO 0);
      alien_defeted : OUT    std_logic ;
      x_coord       : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c4_t1_gunmodule
   PORT (
      btn       : IN     std_logic_vector (3 DOWNTO 0);
      clk       : IN     std_logic ;
      enable    : IN     std_logic ;
      gun_px_id : IN     std_logic_vector (1 DOWNTO 0);
      rst_n     : IN     std_logic ;
      gun_color : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord   : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord   : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c5_t1_write_sequencer
   PORT (
      alien_defeated : IN     std_logic ;
      clk            : IN     std_logic ;
      rst_n          : IN     std_logic ;
      write_ready    : IN     std_logic ;
      enable         : OUT    std_logic ;
      frame_done     : OUT    std_logic ;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c6_t1_hit_detector_alt
   PORT (
      alien_x : IN     std_logic_vector (7 DOWNTO 0);
      btn     : IN     std_logic ;
      clk     : IN     std_logic ;
      gun_x   : IN     std_logic_vector (7 DOWNTO 0);
      rst_n   : IN     std_logic ;
      hit     : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c3_t1_basic_alien USE ENTITY alien_game_lib.c3_t1_basic_alien;
   FOR ALL : c4_t1_gunmodule USE ENTITY alien_game_lib.c4_t1_gunmodule;
   FOR ALL : c5_t1_write_sequencer USE ENTITY alien_game_lib.c5_t1_write_sequencer;
   FOR ALL : c6_t1_hit_detector_alt USE ENTITY alien_game_lib.c6_t1_hit_detector_alt;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_3' of 'mux'
   u_3combo_proc: PROCESS(alien_color, din1, module_select)
   BEGIN
      CASE module_select(0) IS
      WHEN '0' => color_BGR <= alien_color;
      WHEN '1' => color_BGR <= din1;
      WHEN OTHERS => color_BGR <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_3combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(x_coord1, x_coord2, module_select)
   BEGIN
      CASE module_select(0) IS
      WHEN '0' => x_coord <= x_coord1;
      WHEN '1' => x_coord <= x_coord2;
      WHEN OTHERS => x_coord <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'mux'
   u_5combo_proc: PROCESS(y_coord2, y_coord1, module_select)
   BEGIN
      CASE module_select(0) IS
      WHEN '0' => y_coord <= y_coord2;
      WHEN '1' => y_coord <= y_coord1;
      WHEN OTHERS => y_coord <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_5combo_proc;

   -- Instance port mappings.
   U_1 : c3_t1_basic_alien
      PORT MAP (
         clk           => clk,
         enable        => enable,
         hit           => hit,
         rst_n         => rst_n,
         alien_color   => alien_color,
         alien_defeted => alien_defeted,
         x_coord       => x_coord1,
         y_coord       => y_coord2
      );
   U_2 : c4_t1_gunmodule
      PORT MAP (
         btn       => btn,
         clk       => clk,
         enable    => enable,
         gun_px_id => gun_px_idx,
         rst_n     => rst_n,
         gun_color => din1,
         x_coord   => x_coord2,
         y_coord   => y_coord1
      );
   U_0 : c5_t1_write_sequencer
      PORT MAP (
         alien_defeated => alien_defeted,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         write          => write
      );
   U_7 : c6_t1_hit_detector_alt
      PORT MAP (
         alien_x => x_coord1,
         btn     => btn(0),
         clk     => clk,
         gun_x   => x_coord2,
         rst_n   => rst_n,
         hit     => hit
      );

END struct;
