<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:22 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t1_pixel_indexer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-320-SPC)</span>
<span class=C>--          at - 14:03:49  3.11.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t1_pixel_indexer <span class=K>IS</span>
   <span class=K>PORT</span>(
      gun_pix_id : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      x_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_out      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_out      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t1_pixel_indexer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t1_pixel_indexer.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-320-SPC)</span>
<span class=C>--          at - 14:03:49  3.11.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;


<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c4_t1_pixel_indexer <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din3  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'fixshift'</span>
   <span class=K>SIGNAL</span> mw_U_0temp_dout : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_1' of 'fixshift'</span>
   <span class=K>SIGNAL</span> mw_U_1temp_dout : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_2' of 'fixshift'</span>
   <span class=K>SIGNAL</span> mw_U_2temp_dout : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'fixshift'</span>
   dout <= mw_U_0temp_dout;
   u_0combo_proc: <span class=K>PROCESS</span> (x_in)
   <span class=K>BEGIN</span>
      mw_U_0temp_dout <= (<span class=K>OTHERS</span> => '0');
      mw_U_0temp_dout(7 <span class=K>DOWNTO</span> 1) <= x_in(6 + 0 <span class=K>DOWNTO</span> 0);
   <span class=K>END</span> <span class=K>PROCESS</span> u_0combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'fixshift'</span>
   din3 <= mw_U_1temp_dout;
   u_1combo_proc: <span class=K>PROCESS</span> (x_in)
   <span class=K>BEGIN</span>
      mw_U_1temp_dout <= (<span class=K>OTHERS</span> => '0');
      mw_U_1temp_dout(6 <span class=K>DOWNTO</span> 0) <= x_in(7 + 0 <span class=K>DOWNTO</span> 1 + 0);
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'fixshift'</span>
   dout1 <= mw_U_2temp_dout;
   u_2combo_proc: <span class=K>PROCESS</span> (y_in)
   <span class=K>BEGIN</span>
      mw_U_2temp_dout <= (<span class=K>OTHERS</span> => '0');
      mw_U_2temp_dout(6 <span class=K>DOWNTO</span> 0) <= y_in(7 + 0 <span class=K>DOWNTO</span> 1 + 0);
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(y_in, dout1, gun_pix_id)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_pix_id <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_out <= y_in;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_out <= dout1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_out <= y_in;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_out <= y_in;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'mux'</span>
   u_10combo_proc: <span class=K>PROCESS</span>(x_in, dout, din3, gun_pix_id)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_pix_id <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => x_out <= x_in;
      <span class=K>WHEN</span> <span class=S>"01"</span> => x_out <= x_in;
      <span class=K>WHEN</span> <span class=S>"10"</span> => x_out <= dout;
      <span class=K>WHEN</span> <span class=S>"11"</span> => x_out <= din3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10combo_proc;

   <span class=C>-- Instance port mappings.</span>

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
