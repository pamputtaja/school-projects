<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:25 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_basic_alien.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-304-SPC)</span>
<span class=C>--          at - 13:03:42 13.10.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_basic_alien <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      alien_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      alien_defeted : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_basic_alien ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_basic_alien.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - koistin3.UNKNOWN (HTC219-304-SPC)</span>
<span class=C>--          at - 13:03:42 13.10.2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_basic_alien <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> binary_in : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d         : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d1        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> d2        : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1      : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din3      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> direction : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> result    : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result1   : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> alien_color_internal   : <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> alien_defeted_internal : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> x_coord_internal       : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_1' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_1reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_9reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_13' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_13reg_cval : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_b1_incrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c1_b2_decrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_b1_binary_to_onehot
   <span class=K>PORT</span> (
      binary_in   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      one_hot_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_direction_block
   <span class=K>PORT</span> (
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coord_0 : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_coord_7 : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      direction : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_b1_incrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_b1_incrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_b2_decrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_b2_decrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_b1_binary_to_onehot <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_b1_binary_to_onehot;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_direction_block <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_direction_block;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'adff'</span>
   binary_in <= mw_U_1reg_cval;
   u_1seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_1reg_cval <= <span class=S>"000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_1reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'adff'</span>
   alien_defeted_internal <= mw_U_9reg_cval;
   u_9seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_9reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_9reg_cval <= d1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'adff'</span>
   alien_color_internal <= mw_U_13reg_cval;
   u_13seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_13reg_cval <= x<span class=S>"0000FF"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_13reg_cval <= d2;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'constval'</span>
   y_coord <= <span class=S>"00000001"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'constval'</span>
   din3 <= x<span class=S>"000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   din2 <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(binary_in, din1, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d <= binary_in;
      <span class=K>WHEN</span> '1' => d <= din1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(result, result1, direction)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> direction <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => din1 <= result;
      <span class=K>WHEN</span> '1' => din1 <= result1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => din1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'mux'</span>
   u_10combo_proc: <span class=K>PROCESS</span>(alien_defeted_internal, din2, hit)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> hit <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d1 <= alien_defeted_internal;
      <span class=K>WHEN</span> '1' => d1 <= din2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d1 <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'mux'</span>
   u_12combo_proc: <span class=K>PROCESS</span>(alien_color_internal, din3, hit)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> hit <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d2 <= alien_color_internal;
      <span class=K>WHEN</span> '1' => d2 <= din3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_3 : c1_b1_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => binary_in,
         result => result
      );
   U_7 : c1_b2_decrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => binary_in,
         result => result1
      );
   U_0 : c2_b1_binary_to_onehot
      <span class=K>PORT</span> <span class=K>MAP</span> (
         binary_in   => binary_in,
         one_hot_out => x_coord_internal
      );
   U_8 : c3_direction_block
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk       => clk,
         rst_n     => rst_n,
         x_coord_0 => x_coord_internal(0),
         x_coord_7 => x_coord_internal(7),
         direction => direction
      );

   <span class=C>-- Implicit buffered output assignments</span>
   alien_color   <= alien_color_internal;
   alien_defeted <= alien_defeted_internal;
   x_coord       <= x_coord_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
