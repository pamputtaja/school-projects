<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:53:24 on  1.12.2023 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_b2_shiel_reset.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 16:04:15 17&#47;11&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_b2_shiel_reset <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n : <span class=A>IN</span>     <span class=T>std_logic</span>;
      done  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_rst : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_b2_shiel_reset ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_b2_shiel_reset.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - PAMPPU.UNKNOWN (DESKTOP-3NB66EQ)</span>
<span class=C>--          at - 16:04:15 17&#47;11&#47;2023</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c4_b2_shiel_reset <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      init,
      shield_reset,
      s_reset_down,
      done_up
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>SIGNAL</span> hds_next,hds_current,hds_clock: <span class=T>INTEGER</span>;
   <span class=C>-- pragma synthesis_on</span>

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_shield_reset : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= init;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= 0;
         <span class=C>-- pragma synthesis_on</span>
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         <span class=C>-- pragma synthesis_on</span>
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      csm_timeout,
      current_state,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_shield_reset <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (rst_n = '1') <span class=K>THEN</span>
               next_state <= shield_reset;
               csm_to_shield_reset <= '1';
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 1;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= init;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> shield_reset =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= s_reset_down;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 2;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= shield_reset;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s_reset_down =>
            next_state <= done_up;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 3;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> done_up =>
            <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
               next_state <= init;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 4;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= done_up;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= init;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 0;
            <span class=C>-- pragma synthesis_on</span>
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      done <= '0';
      s_rst <= '1';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> shield_reset =>
            s_rst <= '0';
         <span class=K>WHEN</span> s_reset_down =>
            done <= '0';
         <span class=K>WHEN</span> done_up =>
            done <= '1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_shield_reset
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_shield_reset = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"1001"</span>; <span class=C>-- no cycles(10)-1=9</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
