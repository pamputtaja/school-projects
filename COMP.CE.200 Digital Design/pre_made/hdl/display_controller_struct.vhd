-- VHDL Entity pre_made.display_controller.symbol
--
-- Created:
--          by - oinonen2.UNKNOWN (WS-12212-PC)
--          at - 18:43:21 12.09.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY display_controller IS
   PORT( 
      clk        : IN     std_logic;
      color_BGR  : IN     std_logic_vector (23 DOWNTO 0);
      frame_done : IN     std_logic;
      rst_n      : IN     std_logic;
      write      : IN     std_logic;
      x_coord    : IN     std_logic_vector (7 DOWNTO 0);
      y_coord    : IN     std_logic_vector (7 DOWNTO 0);
      channel    : OUT    std_logic_vector (7 DOWNTO 0);
      lat        : OUT    std_logic;
      s_clk      : OUT    std_logic;
      s_rst      : OUT    std_logic;
      s_sda      : OUT    std_logic;
      sb         : OUT    std_logic;
      w_rdy      : OUT    std_logic
   );

-- Declarations

END display_controller ;

--
-- VHDL Architecture pre_made.display_controller.struct
--
-- Created:
--          by - oinonen2.UNKNOWN (WS-12212-PC)
--          at - 18:43:21 12.09.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY pre_made;

ARCHITECTURE struct OF display_controller IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL bit_c      : std_logic;
   SIGNAL bit_g      : std_logic;
   SIGNAL bit_in     : std_logic;
   SIGNAL done       : std_logic;
   SIGNAL lat_c      : std_logic;
   SIGNAL lat_g      : std_logic;
   SIGNAL pixd       : std_logic_vector(23 DOWNTO 0);
   SIGNAL ready      : std_logic;
   SIGNAL rx_ready   : std_logic;
   SIGNAL rx_ready_c : std_logic;
   SIGNAL transmit   : std_logic;
   SIGNAL tx_c       : std_logic;
   SIGNAL tx_g       : std_logic;
   SIGNAL xr         : std_logic_vector(7 DOWNTO 0);
   SIGNAL yr         : std_logic_vector(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL sb_internal : std_logic;


   -- Component Declarations
   COMPONENT disp_gamma
   PORT (
      clk     : IN     std_logic;
      rst_n   : IN     std_logic;
      run     : IN     std_logic;
      bit_out : OUT    std_logic;
      lat     : OUT    std_logic;
      sb      : OUT    std_logic;
      tx      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT disp_reg_bank
   PORT (
      clk      : IN     std_logic;
      pixd_in  : IN     std_logic_vector (23 DOWNTO 0);
      rst_n    : IN     std_logic;
      w_done   : IN     std_logic;
      write    : IN     std_logic;
      xr       : IN     std_logic_vector (7 DOWNTO 0);
      xw       : IN     std_logic_vector (7 DOWNTO 0);
      yr       : IN     std_logic_vector (7 DOWNTO 0);
      yw       : IN     std_logic_vector (7 DOWNTO 0);
      pixd_out : OUT    std_logic_vector (23 DOWNTO 0);
      w_rdy    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT disp_rst
   PORT (
      clk   : IN     std_logic;
      rst_n : IN     std_logic;
      done  : OUT    std_logic;
      s_rst : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT disp_serial_led_cannon
   PORT (
      clk     : IN     std_logic;
      pixdata : IN     std_logic_vector (23 DOWNTO 0);
      rst_n   : IN     std_logic;
      run     : IN     std_logic;
      bit_out : OUT    std_logic;
      chans   : OUT    std_logic_vector (7 DOWNTO 0);
      lat     : OUT    std_logic;
      tx      : OUT    std_logic;
      x       : OUT    std_logic_vector (7 DOWNTO 0);
      y       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT disp_serial_tx
   PORT (
      bit_in    : IN     std_logic;
      clk       : IN     std_logic;
      rst_n     : IN     std_logic;
      run       : IN     std_logic;
      ready_out : OUT    std_logic;
      s_clk     : OUT    std_logic;
      s_sda     : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : disp_gamma USE ENTITY pre_made.disp_gamma;
   FOR ALL : disp_reg_bank USE ENTITY pre_made.disp_reg_bank;
   FOR ALL : disp_rst USE ENTITY pre_made.disp_rst;
   FOR ALL : disp_serial_led_cannon USE ENTITY pre_made.disp_serial_led_cannon;
   FOR ALL : disp_serial_tx USE ENTITY pre_made.disp_serial_tx;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_4' of 'and'
   rx_ready <= done AND ready;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'and'
   rx_ready_c <= ready AND sb_internal;

   -- ModuleWare code(v1.12) for instance 'sel_tx_bit' of 'mux'
   sel_tx_bitcombo_proc: PROCESS(bit_g, bit_c, sb_internal)
   BEGIN
      CASE sb_internal IS
      WHEN '0' => bit_in <= bit_g;
      WHEN '1' => bit_in <= bit_c;
      WHEN OTHERS => bit_in <= 'X';
      END CASE;
   END PROCESS sel_tx_bitcombo_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'or'
   transmit <= tx_g OR tx_c;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'or'
   lat <= lat_g OR lat_c;

   -- Instance port mappings.
   U_2 : disp_gamma
      PORT MAP (
         clk     => clk,
         rst_n   => rst_n,
         run     => rx_ready,
         bit_out => bit_g,
         sb      => sb_internal,
         tx      => tx_g,
         lat     => lat_g
      );
   U_0 : disp_reg_bank
      PORT MAP (
         clk      => clk,
         pixd_in  => color_BGR,
         rst_n    => rst_n,
         w_done   => frame_done,
         write    => write,
         xr       => xr,
         xw       => x_coord,
         yr       => yr,
         yw       => y_coord,
         pixd_out => pixd,
         w_rdy    => w_rdy
      );
   U_1 : disp_rst
      PORT MAP (
         clk   => clk,
         rst_n => rst_n,
         done  => done,
         s_rst => s_rst
      );
   U_3 : disp_serial_led_cannon
      PORT MAP (
         clk     => clk,
         pixdata => pixd,
         rst_n   => rst_n,
         run     => rx_ready_c,
         bit_out => bit_c,
         chans   => channel,
         lat     => lat_c,
         tx      => tx_c,
         x       => xr,
         y       => yr
      );
   U_8 : disp_serial_tx
      PORT MAP (
         bit_in    => bit_in,
         clk       => clk,
         rst_n     => rst_n,
         run       => transmit,
         ready_out => ready,
         s_clk     => s_clk,
         s_sda     => s_sda
      );

   -- Implicit buffered output assignments
   sb <= sb_internal;

END struct;
